<?php

	require_once( $_SERVER['DOCUMENT_ROOT']."/libs/verify_session.php" );
	require_once( $_SERVER['DOCUMENT_ROOT']."/translations/trash.php" );




	include_once( $_SERVER['DOCUMENT_ROOT']."/libs/db_common.php" );



	$ErrMsg = "";
	$OkMsg  = "";



	if("loadDeletedInquiries" == $ajaxRequest){
		//========================================================================
		//=
		//= LOAD INQUIRIES MOVED TO TRASH
		//=   Loads and display inquiries user has removed fromr HIS/HER view
		//=   into trashcan.
		//=
		//=   The inquiries to load can be selected by specifying which business
		//=   category id and/or which area they should belong to.
		//=
		//= TODO: Show if user has replied to query or not!
		//= TODO: Now we always load all inquiries even though we are only
		//=       interested in those on the current page. When we later change
		//=       page we reload all inquiries again. Not efficient.
		//= ----------------------------------------------------------------------
		//= Parameters:
		//=   ajaxRequest                : "loadInquiries",                 (string)
		//=   businessServiceCategoryIds : (integer)
		//=                                Array of business service category ids
		//=                                that the inquiry must match.
		//=                                Inquiries that don't match any of these
		//=                                id's aren't loaded.
		//=   sweden_LanKommunerIds      : sweden_LanKommunerIds,      (integer)
		//=   records                    : Number or inquiries to show per page. (integer)
		//=   page                       : Which inquiry page to show.   (integer)
		//=   checksum                   : checksum                    (checksum generated by the server)
		//========================================================================


		// sanity checks on variables
		if(!VerifyCheckSum($records.$page,$checksum)){
			$ErrMsg = "CheckSum Error @ ".__LINE__;
			header("Status: 400 " . $ErrMsg );
			exit(0);
		}
		db_connect();

		//paging variables
		$records   = isset($records) ? $records : 20;
		$page      = isset($page)    ? $page    : 1;
		$offset    = ($page - 1) * $records;

		$sql_count = "
					  SELECT
						COUNT(SR.Id)
					  FROM
						User U INNER JOIN ServiceRequest SR ON U.Id = SR.User_Id
						INNER JOIN BusinessServiceCategory BSC ON SR.BusinessServiceCategory_Id = BSC.Id
						INNER JOIN Sweden_LanKommuner SL ON SR.Sweden_LanKommuner_Id = SL.Id
						WHERE SR.Id IN (
						  SELECT ServiceRequest_Id
						  FROM MyViewDeletedServiceRequests
						  WHERE ServiceRequest_Id = SR.Id
							 AND User_Id = ".$_SESSION['User']['Id']."
						)";
		$sql_count.= appendConditions($businessServiceCategoryIds,$sweden_LanKommunerIds);
		$result    = mysql_query($sql_count);
		$count     = mysql_fetch_row($result);
		mysql_free_result($result);
		$total_pages = ceil((int)$count[0] / $records);

		$businessServiceCategoryIds = isset($businessServiceCategoryIds) ? mysql_real_escape_string($businessServiceCategoryIds) : "";
		$sweden_LanKommunerIds      = isset($sweden_LanKommunerIds)      ? mysql_real_escape_string($sweden_LanKommunerIds)      : "";

		// Columns returned by below SQL statement:
		//   ReplyCount:   Number of replies that has been made (by anyone) to this request.
		//   HaveReplied:  0 if current user hasn't replied to the request.
		//                 >0 if current user has replied to the request.
		$sql = "
				SELECT
					U.Id,
					SR.Id AS Request_Id,
					CONCAT_WS(' ',U.FirstName,U.LastName) AS Creator_FullName,
					U.Email AS Creator_Email,
					U.Phone AS Creator_Phone,
					SL.name AS Place,
					BSC.Category AS Service,
					SR.DateCreated AS Date,
					SR.Status AS Status,
					SR.ServiceIsFor AS Classification,
					SR.Description AS Description,
					SR.ServiceNeededWhen AS ServiceNeededWhen,
					(SELECT COUNT(SRR2.Id) FROM ServiceRequestReplies AS SRR2 WHERE SR.Id = SRR2.ServiceRequest_Id) AS ReplyCount,
					(SELECT COUNT(SRR3.Id)
						FROM ServiceRequestReplies AS SRR3
						WHERE SRR3.Replier_Id = ".$_SESSION["User"]["Id"]."
						AND SRR3.ServiceRequest_Id = SR.Id) AS HaveReplied
				FROM
					User U INNER JOIN ServiceRequest SR ON U.Id = SR.User_Id
					INNER JOIN BusinessServiceCategory BSC ON SR.BusinessServiceCategory_Id = BSC.Id
					INNER JOIN Sweden_LanKommuner SL ON SR.Sweden_LanKommuner_Id = SL.Id
				WHERE SR.Id IN (
				  SELECT ServiceRequest_Id
				  FROM MyViewDeletedServiceRequests
				  WHERE ServiceRequest_Id = SR.Id
					 AND User_Id = ".$_SESSION['User']['Id']."
				)";
		$sql.= appendConditions($businessServiceCategoryIds,$sweden_LanKommunerIds);
		$sql.= "
				ORDER BY
					SR.Status ASC,
					SR.DateCreated ASC
				LIMIT
					$offset,$records
			   ";
		$result = mysql_query($sql);

		if(0 != mysql_errno()){
			$ErrMsg = "Query Error @ ".__LINE__." ". mysql_error();
			header("Status: 400 " . $ErrMsg );
			exit(0);
		}

		ob_start(); // Output buffer to prevent immediate output.
		$rowNum = 0;
		while($row = mysql_fetch_assoc($result)){
         $row['Files'] = getInquiryFiles($row['Request_Id']);
			$rowNum+=1;
			$rowType = $rowNum % 2 == 0 ? "even" : "odd";
			include("inc_trash_rowSnippet.html");
		}
		mysql_free_result($result);
		$result_data_html = ob_get_contents(); // Get output buffer
		ob_end_clean();

		if(0 != $rowNum){
			print $result_data_html;
		}
		else{
			print "<div style=\"text-align:center;padding-top:5px;color:#E66313;font-weight:bold;\">{$trans["trash_no_matches"]}</div>";
		}
		exit(0);

	}



	/*
		description :
			appends search filters to the query;
		params :
			$businessServiceCategoryIds
			$sweden_LanKommunerIds
		returns :
			appended filters
	*/
	function appendConditions($businessServiceCategoryIds,$sweden_LanKommunerIds){
		$sql = "";
		if(!empty($businessServiceCategoryIds)){
			$sql .= " AND SR.BusinessServiceCategory_Id IN ($businessServiceCategoryIds)";
		}

		if(!empty($sweden_LanKommunerIds)){
			$sql .= " AND SR.Sweden_LanKommuner_Id IN ($sweden_LanKommunerIds)";
		}
		return $sql;
	}


   /**
    * Get an array of files attached to an inquiry.
    *
    * @param inquiryId  Id of the inquiry whos files we want.
    *
    * @return An array with each entry representing one file.
    *         Each entry is an associative array of the form:
    *         "name" => <name of file>,
    *         "idAndChecksum" => <string of the form "<fileId>:<CheckSum(fileId)>",
    *         e.g. "123:72347ca6234ca".
    */
   function getInquiryFiles($inquiryId) {
      $sql = "
         SELECT
            F.Id AS Id,
            F.Name AS Name
         FROM ServiceRequestFiles SRF, Files F
         WHERE
            SRF.ServiceRequest_Id = ".$inquiryId." AND
            SRF.File_Id = F.Id";
      $result = mysql_query($sql);
      if (!$result) {
         return;
      }

      $files = array();
      while ($row = mysql_fetch_assoc($result)) {
         $files[] = array('name' => $row['Name'], 'idAndChecksum' => $row['Id'].':'.CheckSum($row['Id']));
      }

      mysql_free_result($result);
      return $files;
   }



	include( "inc_trash.html" );
	return;
?>


<?php
	// TODO: This code is view code and shouldn't be in this (inquires.php) file
	//       as this file is more of a model/controller file!

	// Code to substring while counting html entities as just one character.
	// Copied from user comment at: http://www.php.net/manual/en/function.substr.php
	function html_strlen($str) {
		$chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
		return count($chars);
	}

	function html_substr($str, $start, $length = NULL) {
		if ($length === 0) return ""; //stop wasting our time ;)

		//check if we can simply use the built-in functions
		if (strpos($str, '&') === false) { //No entities. Use built-in functions
			if ($length === NULL)
				return substr($str, $start);
			else
				return substr($str, $start, $length);
		}

		// create our array of characters and html entities
		$chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
		$html_length = count($chars);

		// check if we can predict the return value and save some processing time
		if (
			($html_length === 0) /* input string was empty */ or
			($start >= $html_length) /* $start is longer than the input string */ or
			(isset($length) and ($length <= -$html_length)) /* all characters would be omitted */
		)
			return "";

		//calculate start position
		if ($start >= 0) {
			$real_start = $chars[$start][1];
		} else { //start'th character from the end of string
			$start = max($start,-$html_length);
			$real_start = $chars[$html_length+$start][1];
		}

		if (!isset($length)) // no $length argument passed, return all remaining characters
			return substr($str, $real_start);
		else if ($length > 0) { // copy $length chars
			if ($start+$length >= $html_length) { // return all remaining characters
				return substr($str, $real_start);
			} else { //return $length characters
				return substr($str, $real_start, $chars[max($start,0)+$length][1] - $real_start);
			}
		} else { //negative $length. Omit $length characters from end
			return substr($str, $real_start, $chars[$html_length+$length][1] - $real_start);
		}
	}

?>

